#!/bin/bash
set -xeuo pipefail
export LC_ALL=C

########################################################################
# Self-contained installer for KlipperScreen (auto-start after boot)  #
# Usage: run in image-build context where /common.sh and /files/00-config exist
########################################################################

source /common.sh
install_cleanup_trap
source /files/00-config

# Required variables from /files/00-config:
# - BASE_USER  (e.g. 'pi' or 'mainsail')
if [ -z "${BASE_USER:-}" ]; then
  echo "ERROR: BASE_USER not set in /files/00-config"
  exit 1
fi

SRC_DIR="/home/${BASE_USER}/KlipperScreen"
REPO="https://github.com/my-dudhwala/my-KlipperScreen"
VENV_DIR="${SRC_DIR}/venv"

# Packages: Xorg, minimal WM, python, build tools if needed. NOTE: python3-venv required.
DEPS=(git python3 python3-venv python3-dev python3-gi \
      python3-gi-cairo gir1.2-gtk-3.0 libgtk-3-0 \
      xserver-xorg xinit x11-xserver-utils matchbox-window-manager \
      fonts-dejavu fonts-freefont-ttf \
      libcairo2 libcairo2-dev pkg-config build-essential cmake \
      libatlas-base-dev libopenblas-dev)

echo "Installing apt dependencies..."
apt-get update
apt-get install --yes "${DEPS[@]}"

# Clean apt lists to reduce image size
apt-get clean
rm -rf /var/lib/apt/lists/*

# Clone or update repo
if [ ! -d "${SRC_DIR}" ]; then
    echo "Cloning KlipperScreen repo into ${SRC_DIR}..."
    sudo -u "${BASE_USER}" git clone "${REPO}" "${SRC_DIR}"
else
    echo "Updating existing KlipperScreen repo..."
    pushd "${SRC_DIR}"
    sudo -u "${BASE_USER}" git pull --ff-only || true
    popd
fi

# Create Python virtual environment (owned by BASE_USER)
if [ ! -d "${VENV_DIR}" ]; then
    echo "Creating virtualenv at ${VENV_DIR} ..."
    sudo -u "${BASE_USER}" /usr/bin/python3 -m venv "${VENV_DIR}"
else
    echo "Virtualenv already exists at ${VENV_DIR}"
fi

# Upgrade pip/setuptools/wheel inside venv
echo "Upgrading pip/setuptools/wheel inside venv..."
sudo -u "${BASE_USER}" "${VENV_DIR}/bin/pip" install --upgrade pip setuptools wheel

# Install Python requirements into venv (if file present)
REQ_FILE="${SRC_DIR}/scripts/KlipperScreen-requirements.txt"
if [ -f "${REQ_FILE}" ]; then
    echo "Installing Python requirements into venv..."
    sudo -u "${BASE_USER}" "${VENV_DIR}/bin/pip" install -r "${REQ_FILE}"
else
    echo "Warning: requirements file not found at ${REQ_FILE}. Skipping pip install."
fi

########################################################################
# Create start wrapper and service files (use venv python)
########################################################################

START_WRAPPER="${SRC_DIR}/start-klipperscreen.sh"
cat > "${START_WRAPPER}" <<EOF
#!/bin/bash
# wrapper to start minimal WM and KlipperScreen in an X session
export XDG_RUNTIME_DIR="/run/user/$(id -u)"
export DISPLAY=":0"

# Start matchbox-window-manager in background if available
if command -v matchbox-window-manager >/dev/null 2>&1; then
    matchbox-window-manager &
    sleep 0.6
fi

# Run KlipperScreen using the virtualenv python
exec "${VENV_DIR}/bin/python" "${SRC_DIR}/screen.py"
EOF

# Set ownership and permissions
chown "${BASE_USER}:${BASE_USER}" "${START_WRAPPER}"
chmod +x "${START_WRAPPER}"

# Create a systemd service that will start X and run the wrapper as BASE_USER
X_SERVICE="/etc/systemd/system/klipperscreen-x.service"
cat > "${X_SERVICE}" <<EOF
[Unit]
Description=KlipperScreen X session (auto-start)
After=systemd-user-sessions.service network.target
Wants=network.target

[Service]
Type=simple
ExecStart=/bin/bash -lc 'exec su - ${BASE_USER} -c "/usr/bin/xinit ${SRC_DIR}/start-klipperscreen.sh -- :0 vt7 -nolisten tcp 2>>/tmp/klipperscreen-x.log"'
Restart=on-failure
RestartSec=2
TTYPath=/dev/tty7

[Install]
WantedBy=graphical.target
EOF

# Enable the service (works in image builds)
ln -sf "${X_SERVICE}" /etc/systemd/system/graphical.target.wants/klipperscreen-x.service

########################################################################
# Optional fallback service (uses venv python directly)
########################################################################

KS_SERVICE="/etc/systemd/system/KlipperScreen.service"
cat > "${KS_SERVICE}" <<EOF
[Unit]
Description=KlipperScreen (fallback service)
After=klipperscreen-x.service

[Service]
User=${BASE_USER}
WorkingDirectory=${SRC_DIR}
ExecStart=${VENV_DIR}/bin/python ${SRC_DIR}/screen.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

# Do not auto-enable fallback by default (commented earlier). If you want it enabled, add a symlink:
# ln -sf "${KS_SERVICE}" /etc/systemd/system/multi-user.target.wants/KlipperScreen.service

########################################################################
# Final ownership and permissions for repo & scripts
########################################################################
chown -R "${BASE_USER}:${BASE_USER}" "${SRC_DIR}"
chmod +x "${SRC_DIR}"/*.sh || true
chmod +x "${SRC_DIR}/scripts"/*.sh || true || true

echo "Installation finished. Services created:"
echo " - klipperscreen-x.service (enabled -> graphical.target)"
echo " - KlipperScreen.service (file created as fallback, not enabled by default)"

echo
echo "TIP: If KlipperScreen does not appear after first boot, check:"
echo "  sudo journalctl -u klipperscreen-x.service -b"
echo "  sudo cat /tmp/klipperscreen-x.log"
